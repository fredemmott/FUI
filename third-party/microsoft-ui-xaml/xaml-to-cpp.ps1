# Copyright 2024 Fred Emmott <fred@fredemmott.com>
# SPDX-License-Identifier: MIT
param($InputFile, $OutputFile)

$XMLNS = @{
  p = "http://schemas.microsoft.com/winfx/2006/xaml/presentation";
  x = "http://schemas.microsoft.com/winfx/2006/xaml";
}
$CppNs = "FredEmmott::GUI::gui_detail::WinUI3Themes"

$Themes = Select-Xml `
  -Path $InputFile `
  -Namespace $XMLNS `
  -XPath "/p:ResourceDictionary/p:ResourceDictionary.ThemeDictionaries/p:ResourceDictionary"

function Get-Key($Color)
{
  return $Color.GetAttribute("Key", $XMLNS.x)
}

function Get-Color($Node)
{
  $Key = Get-Key($Node)
  $value = $Node.InnerText -replace '#'
  if ($value.Length -eq 6)
  {
    # RGB -> ARGB
    $value = "ff${value}"
  }
  $value = "0x${value}"

  return @{
    Key = $Key;
    Value = $value;
  }
}

function Get-SolidColorBrush($Brush)
{
  $Key = (Get-Key $Brush)
  $Lookup = $Brush.GetAttribute('Color')
  switch -wildcard ($Lookup)
  {
    'Transparent' {
      $Value = 'SK_ColorTRANSPARENT'
    }
    '#FF00FF' {
      # Other hex values are possible, but not actually used. This seems to be a test color
      $Value = 'SK_ColorMAGENTA'
    }
  }
  Write-Host $Lookup
  Write-Host $Value
}

function Get-Theme($Theme)
{
  $Colors = $Theme.Color | Sort-Object -Property { Get-Key($_) } | ForEach-Object { Get-Color($_) }
  $SolidColorBrushes = $Theme.SolidColorBrush | Sort-Object -Property { Get-Key($_) } | ForEach-Object { Get-SolidColorBrush($_) }
  return @{
    Name = $Theme.Key;
    Colors = $Colors;
  }
}

$keys = @()
$ThemeData = $Themes | ForEach-Object { Get-Theme $_.Node }
$Keys = $ThemeData[0].Colors | ForEach-Object { $_.Key } | Sort-Object | Get-Unique

$content = @"
// $( '@' )generated by: $( $( Get-Item $PSCommandPath ).Name ) $( $( Get-Item ${InputFile} ).Name )
#pragma once

#include <skia/core/SkColor.h>

namespace ${CppNs} {

struct ThemeColors {$(
$Keys.foreach({ "`n  SkColor m$PSItem;" }) )
};

$( foreach ($Theme in $ThemeData)
{
  Write-Output @"
constexpr ThemeColors $( $Theme.Name )ThemeColors {$(
  foreach ($Color in $Theme.Colors)
  {
    Write-Output "`n  .m$( $Color.Key ) = $( $Color.Value ),"
  }
  )
};

"@
} )

enum class Colors {$(
$Keys.foreach({ "`n  $( $PSItem )," }) )
};

}

#define FUI_WINUI_THEME_COLORS(X) $(
$Keys.foreach({ "\`n  X($PSItem)" })
)
"@

($content -split "`r" -join "") `
  | Set-Content -Encoding utf8 "$OutputFile" -NoNewline
