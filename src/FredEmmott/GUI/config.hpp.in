// Copyright 2025 Fred Emmott <fred@fredemmott.com>
// SPDX-License-Identifier: MIT
#pragma once

#include <string_view>

#cmakedefine FUI_ENABLE_SKIA
#cmakedefine FUI_ENABLE_DIRECT2D

// See notes on no_unique_address here:
// https://devblogs.microsoft.com/cppblog/msvc-cpp20-and-the-std-cpp20-switch/
#if __has_cpp_attribute(msvc::no_unique_address)
#define FUI_NO_UNIQUE_ADDRESS [[msvc::no_unique_address]]
#elif __has_cpp_attribute(no_unique_address)
#define FUI_NO_UNIQUE_ADDRESS [[no_unique_address]]
#else
#error "Don't know how to set [[no_unique_address]] on this compiler; ABI incompatibility."
#endif

namespace FredEmmott::GUI::Config {
#ifndef NDEBUG
constexpr bool Debug = true;
#else
constexpr bool Debug = false;
#endif

// Allows optimizations
constexpr auto BackendCount = @BACKEND_COUNT@;
static_assert(BackendCount > 0, "At least one backend must be enabled");
constexpr bool HaveSingleBackend = (BackendCount == 1);

constexpr bool HaveSkia = @ENABLE_SKIA_BOOL@;
constexpr bool HaveDirect2D = @ENABLE_DIRECT2D_BOOL@;

}// namespace FredEmmott::GUI::Config

namespace FredEmmott::GUI::Config::CompilerChecks {

// As of Visual Studio 17.14.7 (2025-06-23), MSVC does not yet
// support the nicer `\u{1f4a9}` syntax from P2290R3
constexpr std::string_view UnicodeLiteral {"\U0001f4a9"};
static_assert(
  UnicodeLiteral == "ðŸ’©",
  "Compiler is not set to UTF-8; if you're using MSVC, add /utf-8");

// Don't require `/Zc:__cplusplus` under MSVC...
#if defined(_MSVC_LANG)
// Check for larger because as of VS 17.14.7 (2025-06-23), by default:
// - MSVC will have _MSVC_LANG > __cplusplus
// - clang-cl will have __cplusplus > MSVC_LANG
// - for both, only one of those will report C++23
constexpr auto CPlusPlus
  = (_MSVC_LANG > __cplusplus) ? _MSVC_LANG : __cplusplus;
#else
constexpr auto CPlusPlus = __cplusplus;
#endif
static_assert(CPlusPlus >= 202302, "C++23 is required");
}// namespace FredEmmott::GUI::CompilerChecks